{
  "collection": {
    "_": {
      "postman_id": "2e8f7d51-d3b1-4a74-9a65-db5bc702805d"
    },
    "item": [
      {
        "id": "8aac1fbb-0e85-49af-8e26-7d535e643a54",
        "name": "Unknown DELETE Command",
        "request": {
          "url": {
            "path": [
              "cgi-bin",
              "rpc"
            ],
            "host": [
              "{{hostUrl}}"
            ],
            "query": [
              {
                "description": {
                  "content": "目標 Mosquitto 伺服器網址",
                  "type": "text/plain"
                },
                "key": "h",
                "value": "{{mosquittoUrl}}"
              },
              {
                "description": {
                  "content": "目標 Mosquitto 伺服器連接埠",
                  "type": "text/plain"
                },
                "key": "p",
                "value": "{{mosquittoPort}}"
              },
              {
                "description": {
                  "content": "對話路由",
                  "type": "text/plain"
                },
                "key": "t",
                "value": "test/testdevice"
              }
            ],
            "variable": []
          },
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c83f3aff-727c-4185-b7b2-ea28d8c055be",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"POST RPC method is success\", () => {\r",
                "    pm.response.to.have.status(200)\r",
                "})\r",
                "pm.test(\"Response structure is right\", () => {\r",
                "    const responseJson = pm.response.json();\r",
                "    pm.expect(responseJson).to.be.a(\"object\");\r",
                "    pm.expect(responseJson).haveOwnProperty(\"status\");\r",
                "    pm.expect(responseJson).haveOwnProperty(\"message\");\r",
                "})\r",
                "pm.test(\"Response is success\", () => {\r",
                "    const responseJson = pm.response.json();\r",
                "    pm.expect(responseJson).to.be.a(\"object\");\r",
                "    pm.expect(responseJson.status).to.eql(\"Error: Unknown API command\");\r",
                "    pm.expect(responseJson.message).include(\"DELETE\");\r",
                "})"
              ],
              "_lastExecutionId": "3cf2418b-1659-4cc2-99ad-cf6bbda9f42a"
            }
          }
        ]
      },
      {
        "id": "918be3ca-18bb-4e7a-a8e9-674697cd36da",
        "name": "Register listener",
        "request": {
          "url": {
            "path": [
              "cgi-bin",
              "rpc"
            ],
            "host": [
              "{{hostUrl}}"
            ],
            "query": [
              {
                "description": {
                  "content": "目標 Mosquitto 伺服器網址",
                  "type": "text/plain"
                },
                "key": "h",
                "value": "{{mosquittoUrl}}"
              },
              {
                "description": {
                  "content": "目標 Mosquitto 伺服器連接埠",
                  "type": "text/plain"
                },
                "key": "p",
                "value": "{{mosquittoPort}}"
              },
              {
                "description": {
                  "content": "對話路由",
                  "type": "text/plain"
                },
                "key": "t",
                "value": "test/testdevice"
              },
              {
                "disabled": true,
                "description": {
                  "content": "偵聽等候時間，預設為 20 秒",
                  "type": "text/plain"
                },
                "key": "w",
                "value": "20"
              }
            ],
            "variable": []
          },
          "method": "PUT"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f6fe8cb3-13d9-40d7-a0e3-aa68adc6eff6",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"POST RPC method is success\", () => {\r",
                "    pm.response.to.have.status(200)\r",
                "})\r",
                "pm.test(\"Response structure is right\", () => {\r",
                "    const responseJson = pm.response.json();\r",
                "    pm.expect(responseJson).to.be.a(\"object\");\r",
                "    pm.expect(responseJson).haveOwnProperty(\"status\");\r",
                "    pm.expect(responseJson).haveOwnProperty(\"message\");\r",
                "})"
              ],
              "_lastExecutionId": "ad2c9874-782c-4865-84bc-084f1878f205"
            }
          }
        ]
      },
      {
        "id": "a8204683-c52b-4f28-a645-b83b7e8d6b04",
        "name": "Published",
        "request": {
          "url": {
            "path": [
              "cgi-bin",
              "rpc"
            ],
            "host": [
              "{{hostUrl}}"
            ],
            "query": [
              {
                "description": {
                  "content": "目標 Mosquitto 伺服器網址",
                  "type": "text/plain"
                },
                "key": "h",
                "value": "{{mosquittoUrl}}"
              },
              {
                "description": {
                  "content": "目標 Mosquitto 伺服器連接埠",
                  "type": "text/plain"
                },
                "key": "p",
                "value": "{{mosquittoPort}}"
              },
              {
                "description": {
                  "content": "對話路由",
                  "type": "text/plain"
                },
                "key": "t",
                "value": "test/testdevice"
              }
            ],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{'id':1, 'src':'mynewtopic', 'method':'Schedule.List'}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "8ab515c8-3291-4cfe-af32-e9f1235dd469",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"POST RPC method is success\", () => {\r",
                "    pm.response.to.have.status(200)\r",
                "})\r",
                "pm.test(\"Response structure is right\", () => {\r",
                "    const responseJson = pm.response.json();\r",
                "    pm.expect(responseJson).to.be.a(\"object\");\r",
                "    pm.expect(responseJson).haveOwnProperty(\"status\");\r",
                "    pm.expect(responseJson).haveOwnProperty(\"message\");\r",
                "    pm.expect(responseJson).haveOwnProperty(\"request\");\r",
                "    pm.expect(responseJson.request).haveOwnProperty(\"METHOD\");\r",
                "    pm.expect(responseJson.request.METHOD).to.eql(\"POST\");\r",
                "})\r",
                "pm.test(\"Response is success\", () => {\r",
                "    const responseJson = pm.response.json();\r",
                "    pm.expect(responseJson).to.be.a(\"object\");\r",
                "    pm.expect(responseJson).haveOwnProperty(\"status\");\r",
                "    pm.expect(responseJson.status).to.eql(\"success\");\r",
                "    pm.expect(responseJson).haveOwnProperty(\"message\");\r",
                "    pm.expect(responseJson.message).to.eql(\"\");\r",
                "})"
              ],
              "_lastExecutionId": "c81288cf-9a69-4d6e-ac96-80d37eccff81"
            }
          }
        ]
      },
      {
        "id": "a24ff564-a48a-4122-b857-818979b2000c",
        "name": "Subscribe",
        "request": {
          "url": {
            "path": [
              "cgi-bin",
              "rpc"
            ],
            "host": [
              "{{hostUrl}}"
            ],
            "query": [
              {
                "description": {
                  "content": "目標 Mosquitto 伺服器網址",
                  "type": "text/plain"
                },
                "key": "h",
                "value": "{{mosquittoUrl}}"
              },
              {
                "description": {
                  "content": "目標 Mosquitto 伺服器連接埠",
                  "type": "text/plain"
                },
                "key": "p",
                "value": "{{mosquittoPort}}"
              },
              {
                "description": {
                  "content": "對話路由",
                  "type": "text/plain"
                },
                "key": "t",
                "value": "test/testdevice"
              },
              {
                "description": {
                  "content": "若為 \"1\" 使用 mosquitto_sub 來偵聽；若為 \"0\"，取得本地偵聽 log 內容；預設為 \"1\"",
                  "type": "text/plain"
                },
                "key": "subcmd",
                "value": "0"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "2c20708d-f149-4799-9e8d-bc29220bc835",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"GET RPC method is success\", () => {\r",
                "    pm.response.to.have.status(200)\r",
                "})\r",
                "pm.test(\"Response structure is right\", () => {\r",
                "    const responseJson = pm.response.json();\r",
                "    pm.expect(responseJson).to.be.a(\"object\");\r",
                "    pm.expect(responseJson).haveOwnProperty(\"status\");\r",
                "    pm.expect(responseJson).haveOwnProperty(\"message\");\r",
                "    pm.expect(responseJson).haveOwnProperty(\"request\");\r",
                "    pm.expect(responseJson.request).haveOwnProperty(\"METHOD\");\r",
                "    pm.expect(responseJson.request.METHOD).to.eql(\"GET\");\r",
                "})\r",
                "pm.test(\"Response is success\", () => {\r",
                "    const responseJson = pm.response.json();\r",
                "    pm.expect(responseJson).to.be.a(\"object\");\r",
                "    pm.expect(responseJson).haveOwnProperty(\"status\");\r",
                "    pm.expect(responseJson.status).to.eql(\"success\");\r",
                "    pm.expect(responseJson).haveOwnProperty(\"message\");\r",
                "    pm.expect(responseJson.message).to.not.eql(\"\");\r",
                "})"
              ],
              "_lastExecutionId": "e748be10-88e8-454f-9378-6e9c40b54cb5"
            }
          }
        ]
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "f687429f-74e1-4eb7-9890-277072d974a8",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "257ef18d-546b-4b06-a320-cd1eeed4a600"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "cf8115cd-5ea9-4b32-bb80-9e8c32c8d5f5",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "38eb1172-04d8-4923-b683-5896b293142f"
        }
      }
    ],
    "variable": [],
    "info": {
      "_postman_id": "2e8f7d51-d3b1-4a74-9a65-db5bc702805d",
      "name": "mosquitto-agent",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2022-09-05T10:02:12.828Z",
      "postman_exported_using": "Postman/8.10.0"
    },
    "id": "09a96da1-98d1-4bbd-9de2-376327052b0b",
    "name": "mosquitto-env",
    "values": [
      {
        "type": "any",
        "value": "mosquitto",
        "key": "mosquittoUrl"
      },
      {
        "type": "any",
        "value": "1883",
        "key": "mosquittoPort"
      },
      {
        "type": "any",
        "value": "http://nginx",
        "key": "hostUrl"
      }
    ]
  },
  "globals": {
    "id": "c002f8ef-504f-4bb2-a0bb-213e21a7c48e",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 11,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 4,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 34.5,
      "responseMin": 20,
      "responseMax": 73,
      "responseSd": 22.276669409945466,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662372938806,
      "completed": 1662372943115
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 4,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "45a8cef5-1aa8-4cd9-9504-8fc523fcf08c",
          "httpRequestId": "0c60f2fe-66ea-4661-808f-3f9f25616c5e"
        },
        "item": {
          "id": "8aac1fbb-0e85-49af-8e26-7d535e643a54",
          "name": "Unknown DELETE Command",
          "request": {
            "url": {
              "path": [
                "cgi-bin",
                "rpc"
              ],
              "host": [
                "{{hostUrl}}"
              ],
              "query": [
                {
                  "description": {
                    "content": "目標 Mosquitto 伺服器網址",
                    "type": "text/plain"
                  },
                  "key": "h",
                  "value": "{{mosquittoUrl}}"
                },
                {
                  "description": {
                    "content": "目標 Mosquitto 伺服器連接埠",
                    "type": "text/plain"
                  },
                  "key": "p",
                  "value": "{{mosquittoPort}}"
                },
                {
                  "description": {
                    "content": "對話路由",
                    "type": "text/plain"
                  },
                  "key": "t",
                  "value": "test/testdevice"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c83f3aff-727c-4185-b7b2-ea28d8c055be",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"POST RPC method is success\", () => {\r",
                  "    pm.response.to.have.status(200)\r",
                  "})\r",
                  "pm.test(\"Response structure is right\", () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.a(\"object\");\r",
                  "    pm.expect(responseJson).haveOwnProperty(\"status\");\r",
                  "    pm.expect(responseJson).haveOwnProperty(\"message\");\r",
                  "})\r",
                  "pm.test(\"Response is success\", () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.a(\"object\");\r",
                  "    pm.expect(responseJson.status).to.eql(\"Error: Unknown API command\");\r",
                  "    pm.expect(responseJson.message).include(\"DELETE\");\r",
                  "})"
                ],
                "_lastExecutionId": "3cf2418b-1659-4cc2-99ad-cf6bbda9f42a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "cgi-bin",
              "rpc"
            ],
            "host": [
              "nginx"
            ],
            "query": [
              {
                "key": "h",
                "value": "mosquitto"
              },
              {
                "key": "p",
                "value": "1883"
              },
              {
                "key": "t",
                "value": "test/testdevice"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "616063ff-356f-4042-86e4-9d90dda508f4",
              "system": true
            },
            {
              "key": "Host",
              "value": "nginx",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "ccd0e55e-0050-4360-8fe9-7cc4cbfb0762",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.23.1"
            },
            {
              "key": "Date",
              "value": "Mon, 05 Sep 2022 10:15:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/jsonAccess-control-allow-origin: *"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              85,
              110,
              107,
              110,
              111,
              119,
              110,
              32,
              65,
              80,
              73,
              32,
              99,
              111,
              109,
              109,
              97,
              110,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              68,
              69,
              76,
              69,
              84,
              69,
              32,
              47,
              99,
              103,
              105,
              45,
              98,
              105,
              110,
              47,
              114,
              112,
              99,
              63,
              104,
              61,
              109,
              111,
              115,
              113,
              117,
              105,
              116,
              116,
              111,
              38,
              112,
              61,
              49,
              56,
              56,
              51,
              38,
              116,
              61,
              116,
              101,
              115,
              116,
              47,
              116,
              101,
              115,
              116,
              100,
              101,
              118,
              105,
              99,
              101,
              32,
              100,
              105,
              100,
              32,
              110,
              111,
              116,
              32,
              109,
              97,
              116,
              99,
              104,
              32,
              97,
              32,
              107,
              110,
              111,
              119,
              110,
              32,
              99,
              111,
              109,
              109,
              97,
              110,
              100,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 73,
          "responseSize": 139
        },
        "id": "8aac1fbb-0e85-49af-8e26-7d535e643a54",
        "assertions": [
          {
            "assertion": "POST RPC method is success",
            "skipped": false
          },
          {
            "assertion": "Response structure is right",
            "skipped": false
          },
          {
            "assertion": "Response is success",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e6932695-2b6a-4c04-8caf-039734bdb3cb",
          "length": 4,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b4016a42-9811-4743-9578-3e774f5adbca"
        },
        "item": {
          "id": "918be3ca-18bb-4e7a-a8e9-674697cd36da",
          "name": "Register listener",
          "request": {
            "url": {
              "path": [
                "cgi-bin",
                "rpc"
              ],
              "host": [
                "{{hostUrl}}"
              ],
              "query": [
                {
                  "description": {
                    "content": "目標 Mosquitto 伺服器網址",
                    "type": "text/plain"
                  },
                  "key": "h",
                  "value": "{{mosquittoUrl}}"
                },
                {
                  "description": {
                    "content": "目標 Mosquitto 伺服器連接埠",
                    "type": "text/plain"
                  },
                  "key": "p",
                  "value": "{{mosquittoPort}}"
                },
                {
                  "description": {
                    "content": "對話路由",
                    "type": "text/plain"
                  },
                  "key": "t",
                  "value": "test/testdevice"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "偵聽等候時間，預設為 20 秒",
                    "type": "text/plain"
                  },
                  "key": "w",
                  "value": "20"
                }
              ],
              "variable": []
            },
            "method": "PUT"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6fe8cb3-13d9-40d7-a0e3-aa68adc6eff6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"POST RPC method is success\", () => {\r",
                  "    pm.response.to.have.status(200)\r",
                  "})\r",
                  "pm.test(\"Response structure is right\", () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.a(\"object\");\r",
                  "    pm.expect(responseJson).haveOwnProperty(\"status\");\r",
                  "    pm.expect(responseJson).haveOwnProperty(\"message\");\r",
                  "})"
                ],
                "_lastExecutionId": "ad2c9874-782c-4865-84bc-084f1878f205"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "cgi-bin",
              "rpc"
            ],
            "host": [
              "nginx"
            ],
            "query": [
              {
                "key": "h",
                "value": "mosquitto"
              },
              {
                "key": "p",
                "value": "1883"
              },
              {
                "key": "t",
                "value": "test/testdevice"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1b030b62-f448-4abf-b673-bcb70ebb7887",
              "system": true
            },
            {
              "key": "Host",
              "value": "nginx",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "PUT"
        },
        "response": {
          "id": "834be6dd-0945-4e55-96bc-dd87d95367ec",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.23.1"
            },
            {
              "key": "Date",
              "value": "Mon, 05 Sep 2022 10:15:40 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/jsonAccess-control-allow-origin: *"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              116,
              111,
              112,
              105,
              99,
              32,
              116,
              101,
              115,
              116,
              47,
              116,
              101,
              115,
              116,
              100,
              101,
              118,
              105,
              99,
              101,
              32,
              108,
              105,
              115,
              116,
              101,
              110,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              49,
              32,
              109,
              115,
              103,
              32,
              99,
              111,
              117,
              110,
              116,
              32,
              97,
              110,
              100,
              32,
              50,
              48,
              40,
              115,
              41,
              44,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              47,
              114,
              111,
              111,
              116,
              47,
              109,
              111,
              115,
              113,
              117,
              105,
              116,
              116,
              111,
              45,
              116,
              101,
              115,
              116,
              45,
              116,
              101,
              115,
              116,
              100,
              101,
              118,
              105,
              99,
              101,
              46,
              108,
              111,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              58,
              123,
              34,
              77,
              81,
              84,
              84,
              95,
              80,
              79,
              82,
              84,
              34,
              58,
              34,
              49,
              56,
              56,
              51,
              34,
              44,
              34,
              77,
              81,
              84,
              84,
              95,
              77,
              69,
              83,
              83,
              65,
              71,
              69,
              34,
              58,
              34,
              34,
              44,
              34,
              67,
              79,
              78,
              84,
              69,
              78,
              84,
              95,
              76,
              69,
              78,
              71,
              84,
              72,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              77,
              81,
              84,
              84,
              95,
              83,
              69,
              82,
              86,
              69,
              82,
              34,
              58,
              34,
              109,
              111,
              115,
              113,
              117,
              105,
              116,
              116,
              111,
              34,
              44,
              34,
              77,
              69,
              84,
              72,
              79,
              68,
              34,
              58,
              34,
              80,
              85,
              84,
              34,
              44,
              34,
              77,
              81,
              84,
              84,
              95,
              84,
              79,
              80,
              73,
              67,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              47,
              116,
              101,
              115,
              116,
              100,
              101,
              118,
              105,
              99,
              101,
              34,
              44,
              34,
              67,
              79,
              78,
              84,
              69,
              78,
              84,
              95,
              84,
              89,
              80,
              69,
              34,
              58,
              34,
              34,
              125,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 21,
          "responseSize": 304
        },
        "id": "918be3ca-18bb-4e7a-a8e9-674697cd36da",
        "assertions": [
          {
            "assertion": "POST RPC method is success",
            "skipped": false
          },
          {
            "assertion": "Response structure is right",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c760fcef-9840-40f7-ab89-8b1d9fe0e251",
          "length": 4,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d03a82f6-e11b-4c4d-a0cb-6e64b961e73e"
        },
        "item": {
          "id": "a8204683-c52b-4f28-a645-b83b7e8d6b04",
          "name": "Published",
          "request": {
            "url": {
              "path": [
                "cgi-bin",
                "rpc"
              ],
              "host": [
                "{{hostUrl}}"
              ],
              "query": [
                {
                  "description": {
                    "content": "目標 Mosquitto 伺服器網址",
                    "type": "text/plain"
                  },
                  "key": "h",
                  "value": "{{mosquittoUrl}}"
                },
                {
                  "description": {
                    "content": "目標 Mosquitto 伺服器連接埠",
                    "type": "text/plain"
                  },
                  "key": "p",
                  "value": "{{mosquittoPort}}"
                },
                {
                  "description": {
                    "content": "對話路由",
                    "type": "text/plain"
                  },
                  "key": "t",
                  "value": "test/testdevice"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{'id':1, 'src':'mynewtopic', 'method':'Schedule.List'}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8ab515c8-3291-4cfe-af32-e9f1235dd469",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"POST RPC method is success\", () => {\r",
                  "    pm.response.to.have.status(200)\r",
                  "})\r",
                  "pm.test(\"Response structure is right\", () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.a(\"object\");\r",
                  "    pm.expect(responseJson).haveOwnProperty(\"status\");\r",
                  "    pm.expect(responseJson).haveOwnProperty(\"message\");\r",
                  "    pm.expect(responseJson).haveOwnProperty(\"request\");\r",
                  "    pm.expect(responseJson.request).haveOwnProperty(\"METHOD\");\r",
                  "    pm.expect(responseJson.request.METHOD).to.eql(\"POST\");\r",
                  "})\r",
                  "pm.test(\"Response is success\", () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.a(\"object\");\r",
                  "    pm.expect(responseJson).haveOwnProperty(\"status\");\r",
                  "    pm.expect(responseJson.status).to.eql(\"success\");\r",
                  "    pm.expect(responseJson).haveOwnProperty(\"message\");\r",
                  "    pm.expect(responseJson.message).to.eql(\"\");\r",
                  "})"
                ],
                "_lastExecutionId": "c81288cf-9a69-4d6e-ac96-80d37eccff81"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "cgi-bin",
              "rpc"
            ],
            "host": [
              "nginx"
            ],
            "query": [
              {
                "key": "h",
                "value": "mosquitto"
              },
              {
                "key": "p",
                "value": "1883"
              },
              {
                "key": "t",
                "value": "test/testdevice"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8edb2a5f-7261-470a-9e30-54d9b69a1e74",
              "system": true
            },
            {
              "key": "Host",
              "value": "nginx",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "54",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{'id':1, 'src':'mynewtopic', 'method':'Schedule.List'}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "f4dfd4cd-6a86-4a41-b456-c86a3825c3ec",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.23.1"
            },
            {
              "key": "Date",
              "value": "Mon, 05 Sep 2022 10:15:42 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/jsonAccess-control-allow-origin: *"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              58,
              123,
              34,
              77,
              81,
              84,
              84,
              95,
              84,
              79,
              80,
              73,
              67,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              47,
              116,
              101,
              115,
              116,
              100,
              101,
              118,
              105,
              99,
              101,
              34,
              44,
              34,
              77,
              69,
              84,
              72,
              79,
              68,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              77,
              81,
              84,
              84,
              95,
              77,
              69,
              83,
              83,
              65,
              71,
              69,
              34,
              58,
              34,
              123,
              39,
              105,
              100,
              39,
              58,
              49,
              44,
              32,
              39,
              115,
              114,
              99,
              39,
              58,
              39,
              109,
              121,
              110,
              101,
              119,
              116,
              111,
              112,
              105,
              99,
              39,
              44,
              32,
              39,
              109,
              101,
              116,
              104,
              111,
              100,
              39,
              58,
              39,
              83,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              46,
              76,
              105,
              115,
              116,
              39,
              125,
              34,
              44,
              34,
              77,
              81,
              84,
              84,
              95,
              80,
              79,
              82,
              84,
              34,
              58,
              34,
              49,
              56,
              56,
              51,
              34,
              44,
              34,
              77,
              81,
              84,
              84,
              95,
              83,
              69,
              82,
              86,
              69,
              82,
              34,
              58,
              34,
              109,
              111,
              115,
              113,
              117,
              105,
              116,
              116,
              111,
              34,
              44,
              34,
              67,
              79,
              78,
              84,
              69,
              78,
              84,
              95,
              76,
              69,
              78,
              71,
              84,
              72,
              34,
              58,
              34,
              53,
              52,
              34,
              44,
              34,
              67,
              79,
              78,
              84,
              69,
              78,
              84,
              95,
              84,
              89,
              80,
              69,
              34,
              58,
              34,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              106,
              115,
              111,
              110,
              34,
              125,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 266
        },
        "id": "a8204683-c52b-4f28-a645-b83b7e8d6b04",
        "assertions": [
          {
            "assertion": "POST RPC method is success",
            "skipped": false
          },
          {
            "assertion": "Response structure is right",
            "skipped": false
          },
          {
            "assertion": "Response is success",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1f18889b-02ae-4fef-8138-04d65748a6c8",
          "length": 4,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dac601ec-e637-46fb-84a3-ea3343e89870"
        },
        "item": {
          "id": "a24ff564-a48a-4122-b857-818979b2000c",
          "name": "Subscribe",
          "request": {
            "url": {
              "path": [
                "cgi-bin",
                "rpc"
              ],
              "host": [
                "{{hostUrl}}"
              ],
              "query": [
                {
                  "description": {
                    "content": "目標 Mosquitto 伺服器網址",
                    "type": "text/plain"
                  },
                  "key": "h",
                  "value": "{{mosquittoUrl}}"
                },
                {
                  "description": {
                    "content": "目標 Mosquitto 伺服器連接埠",
                    "type": "text/plain"
                  },
                  "key": "p",
                  "value": "{{mosquittoPort}}"
                },
                {
                  "description": {
                    "content": "對話路由",
                    "type": "text/plain"
                  },
                  "key": "t",
                  "value": "test/testdevice"
                },
                {
                  "description": {
                    "content": "若為 \"1\" 使用 mosquitto_sub 來偵聽；若為 \"0\"，取得本地偵聽 log 內容；預設為 \"1\"",
                    "type": "text/plain"
                  },
                  "key": "subcmd",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2c20708d-f149-4799-9e8d-bc29220bc835",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"GET RPC method is success\", () => {\r",
                  "    pm.response.to.have.status(200)\r",
                  "})\r",
                  "pm.test(\"Response structure is right\", () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.a(\"object\");\r",
                  "    pm.expect(responseJson).haveOwnProperty(\"status\");\r",
                  "    pm.expect(responseJson).haveOwnProperty(\"message\");\r",
                  "    pm.expect(responseJson).haveOwnProperty(\"request\");\r",
                  "    pm.expect(responseJson.request).haveOwnProperty(\"METHOD\");\r",
                  "    pm.expect(responseJson.request.METHOD).to.eql(\"GET\");\r",
                  "})\r",
                  "pm.test(\"Response is success\", () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.a(\"object\");\r",
                  "    pm.expect(responseJson).haveOwnProperty(\"status\");\r",
                  "    pm.expect(responseJson.status).to.eql(\"success\");\r",
                  "    pm.expect(responseJson).haveOwnProperty(\"message\");\r",
                  "    pm.expect(responseJson.message).to.not.eql(\"\");\r",
                  "})"
                ],
                "_lastExecutionId": "e748be10-88e8-454f-9378-6e9c40b54cb5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "cgi-bin",
              "rpc"
            ],
            "host": [
              "nginx"
            ],
            "query": [
              {
                "key": "h",
                "value": "mosquitto"
              },
              {
                "key": "p",
                "value": "1883"
              },
              {
                "key": "t",
                "value": "test/testdevice"
              },
              {
                "key": "subcmd",
                "value": "0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b275662f-31ff-41e7-84b1-3330b9d67ef2",
              "system": true
            },
            {
              "key": "Host",
              "value": "nginx",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5ac51a78-5b3e-4151-9260-0bc279632fd6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.23.1"
            },
            {
              "key": "Date",
              "value": "Mon, 05 Sep 2022 10:15:43 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/jsonAccess-control-allow-origin: *"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              58,
              123,
              34,
              67,
              79,
              78,
              84,
              69,
              78,
              84,
              95,
              76,
              69,
              78,
              71,
              84,
              72,
              34,
              58,
              34,
              34,
              44,
              34,
              77,
              81,
              84,
              84,
              95,
              77,
              69,
              83,
              83,
              65,
              71,
              69,
              34,
              58,
              34,
              34,
              44,
              34,
              77,
              81,
              84,
              84,
              95,
              84,
              79,
              80,
              73,
              67,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              47,
              116,
              101,
              115,
              116,
              100,
              101,
              118,
              105,
              99,
              101,
              34,
              44,
              34,
              77,
              69,
              84,
              72,
              79,
              68,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              77,
              81,
              84,
              84,
              95,
              83,
              69,
              82,
              86,
              69,
              82,
              34,
              58,
              34,
              109,
              111,
              115,
              113,
              117,
              105,
              116,
              116,
              111,
              34,
              44,
              34,
              77,
              81,
              84,
              84,
              95,
              80,
              79,
              82,
              84,
              34,
              58,
              34,
              49,
              56,
              56,
              51,
              34,
              44,
              34,
              67,
              79,
              78,
              84,
              69,
              78,
              84,
              95,
              84,
              89,
              80,
              69,
              34,
              58,
              34,
              34,
              125,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              47,
              116,
              101,
              115,
              116,
              100,
              101,
              118,
              105,
              99,
              101,
              32,
              123,
              39,
              105,
              100,
              39,
              58,
              49,
              44,
              32,
              39,
              115,
              114,
              99,
              39,
              58,
              39,
              109,
              121,
              110,
              101,
              119,
              116,
              111,
              112,
              105,
              99,
              39,
              44,
              32,
              39,
              109,
              101,
              116,
              104,
              111,
              100,
              39,
              58,
              39,
              83,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              46,
              76,
              105,
              115,
              116,
              39,
              125,
              92,
              110,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 20,
          "responseSize": 265
        },
        "id": "a24ff564-a48a-4122-b857-818979b2000c",
        "assertions": [
          {
            "assertion": "GET RPC method is success",
            "skipped": false
          },
          {
            "assertion": "Response structure is right",
            "skipped": false
          },
          {
            "assertion": "Response is success",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 974
    },
    "failures": [],
    "error": null
  }
}